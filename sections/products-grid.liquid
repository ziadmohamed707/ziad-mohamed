{% comment %}
Product Grid Section (Figma)
- 6 product blocks (type: product)
- Each block renders product image, title and a hotspot button (+)
- Clicking + opens popup with product info, variant selectors and Add to Cart (AJAX)
- If the added variant includes option values 'Black' and 'Medium' (case-insensitive),
  the selected jacket product (section setting) will be automatically added too.
- No jQuery. Vanilla JS only.
{% endcomment %}

<section id="fg-product-grid-{{ section.id }}" class="fg-product-grid" aria-label="Product grid">
  <div class="grid-inner">
    <h2 class="grid-heading">{{ section.settings.heading }}</h2>
    <div class="grid-wrap">
      {% for block in section.blocks %}
        {% assign p = all_products[block.settings.product_handle] %}
        {% if p %}
          <div class="grid-item" data-block-index="{{ forloop.index0 }}">
            <div class="product-card">
              <div class="product-media">
                <img src="{{ p.featured_image | img_url: '800x' }}" alt="{{ p.title }}" loading="lazy">
                <button class="hotspot-btn" aria-label="Open product details" data-product='{{ p | json }}'>
                  <span class="hotplus">+</span>
                </button>
              </div>
              <div class="product-info">
                <div class="product-title">{{ p.title }}</div>
                <div class="product-price">{{ p.price | money }}</div>
              </div>
            </div>
          </div>
        {% else %}
          <div class="grid-item placeholder">
            <div class="placeholder-box">Select a product in the theme editor</div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>

  <div id="fg-popup-{{ section.id }}" class="fg-popup" role="dialog" aria-hidden="true" aria-modal="true">
    <div class="fg-popup-inner">
      <button class="fg-close" aria-label="Close popup">Ã—</button>
      <div class="fg-left">
        <img src="" alt="" id="fg-popup-image">
      </div>
      <div class="fg-right">
        <h3 id="fg-popup-title"></h3>
        <div id="fg-popup-price"></div>
        <div id="fg-popup-desc"></div>

        <form id="fg-popup-form">
          <div id="fg-variants-root"></div>
          <div class="fg-quantity">
            <label>Quantity</label>
            <input type="number" id="fg-qty" min="1" value="1">
          </div>
          <button type="submit" id="fg-add-to-cart" class="fg-add-btn">Add to cart</button>
        </form>

        <div id="fg-ajax-message" role="status" aria-live="polite"></div>
      </div>
    </div>
  </div>

  <style>
    /* Grid styles (scoped) */
    #fg-product-grid-{{ section.id }} { padding:36px 0; font-family: Arial, sans-serif; }
    .grid-inner { max-width:1100px; margin:0 auto; }
    .grid-heading { font-size:22px; margin-bottom:14px; }
    .grid-wrap { display:grid; grid-template-columns: repeat(3, 1fr); gap:18px; }
    .product-card { background:#fff; border-radius:4px; box-shadow: 0 6px 18px rgba(0,0,0,.06); overflow:hidden; position:relative; }
    .product-media { position:relative; overflow:hidden; }
    .product-media img { width:100%; height:auto; display:block; }
    .hotspot-btn { position:absolute; right:14px; top:14px; width:36px; height:36px; border-radius:50%; background:#111; color:#fff; border:none; display:flex; align-items:center; justify-content:center; font-size:18px; cursor:pointer; box-shadow:0 6px 18px rgba(0,0,0,.15); }
    .product-info { padding:12px 14px; display:flex; justify-content:space-between; align-items:center; gap:12px; }
    .product-title { font-size:15px; }
    .product-price { font-weight:700; }

    /* Popup */
    .fg-popup { position:fixed; left:50%; top:50%; transform: translate(-50%,-50%); width:900px; max-width:94vw; max-height:86vh; overflow:auto; background:#fff; border-radius:6px; box-shadow:0 20px 60px rgba(0,0,0,.3); z-index:9999; display:none; }
    .fg-popup[aria-hidden="false"] { display:block; }
    .fg-popup-inner { display:flex; gap:18px; padding:18px; }
    .fg-left { flex:1 1 45%; }
    .fg-left img { width:100%; height:auto; display:block; border-radius:4px; }
    .fg-right { flex:1 1 55%; }
    .fg-close { position:absolute; right:10px; top:8px; border:none; background:transparent; font-size:22px; cursor:pointer; }
    #fg-popup-title { margin:0 0 8px; font-size:20px; }
    #fg-popup-price { color:#111; margin-bottom:12px; font-weight:700; }
    #fg-popup-desc { color:#444; margin-bottom:12px; }

    .fg-add-btn { display:inline-block; padding:10px 16px; background:#111; color:#fff; border:none; border-radius:4px; cursor:pointer; margin-top:10px; }
    .fg-quantity input { width:64px; padding:6px; margin-left:8px; }

    /* Responsive: single column on mobile */
    @media (max-width:820px) {
      .grid-wrap { grid-template-columns: repeat(2, 1fr); }
      .fg-popup-inner { flex-direction:column; }
    }
    @media (max-width:520px) {
      .grid-wrap { grid-template-columns: 1fr; }
      .hotspot-btn { right:10px; top:10px; width:30px; height:30px; font-size:16px; }
    }

    .placeholder { background:#f6f6f6; display:flex; align-items:center; justify-content:center; height:200px; border-radius:4px; }
    .placeholder-box { color:#777; padding:12px; text-align:center; }
  </style>

  <script>
    (function () {
      const sectionId = '{{ section.id }}';
      const root = document.getElementById('fg-product-grid-' + sectionId);
      const popup = document.getElementById('fg-popup-{{ section.id }}');
      const popupImage = document.getElementById('fg-popup-image');
      const popupTitle = document.getElementById('fg-popup-title');
      const popupPrice = document.getElementById('fg-popup-price');
      const popupDesc = document.getElementById('fg-popup-desc');
      const popupForm = document.getElementById('fg-popup-form');
      const variantsRoot = document.getElementById('fg-variants-root');
      const qtyInput = document.getElementById('fg-qty');
      const ajaxMessage = document.getElementById('fg-ajax-message');
      const closeBtn = popup.querySelector('.fg-close');

      // Jacket product chosen in theme settings (handle)
      const jacketHandle = '{{ section.settings.jacket_product_handle }}';
      // Cache jacket product JSON when present (merchant must choose in editor)
      let jacketProduct = null;
      {% if section.settings.jacket_product_handle != blank %}
        {% assign jacket = all_products[section.settings.jacket_product_handle] %}
        {% if jacket %}
          jacketProduct = {{ jacket | json }};
        {% endif %}
      {% endif %}

      // Utility: parse product JSON string or object
      function normalizeProduct(data) {
        if (!data) return null;
        if (typeof data === 'string') {
          try { return JSON.parse(data); } catch(e) { return null; }
        }
        return data;
      }

      // Open popup with product data (product JSON from data-product)
      function openPopupWithProduct(productObj) {
        const product = normalizeProduct(productObj);
        if (!product) return;

        // Fill basic fields
        popupImage.src = (product.featured_image && product.featured_image.src) ? product.featured_image.src.replace(/(\.[a-z]+)$/, '{:size}px$1').replace('{:size}', 800) : '';
        popupImage.alt = product.title;
        popupTitle.textContent = product.title;
        popupPrice.textContent = (product.price) ? Shopify.formatMoney(product.price, "{{ shop.money_format }}") : '';
        popupDesc.textContent = product.description ? product.description : '';

        // Build variant selectors
        variantsRoot.innerHTML = '';
        const options = product.options || [];
        // If product has variants, render selects
        if (product.variants && product.variants.length) {
          // For each option (Color, Size, etc.) create select
          options.forEach((optName, idx) => {
            const wrapper = document.createElement('div');
            wrapper.className = 'fg-variant';
            const label = document.createElement('label');
            label.textContent = optName;
            label.setAttribute('for', 'fg-option-' + idx);
            const select = document.createElement('select');
            select.id = 'fg-option-' + idx;
            // compute unique values for this option
            const values = [];
            product.variants.forEach(v => {
              const val = v.options[idx] || '';
              if (!values.includes(val)) values.push(val);
            });
            values.forEach(vv => {
              const op = document.createElement('option');
              op.value = vv;
              op.textContent = vv;
              select.appendChild(op);
            });
            wrapper.appendChild(label);
            wrapper.appendChild(select);
            variantsRoot.appendChild(wrapper);
          });
        } else {
          variantsRoot.innerHTML = '<div>No variants available</div>';
        }

        // Save product JSON on the form element for submit handler
        popupForm.dataset.product = JSON.stringify(product);

        // Show popup
        popup.setAttribute('aria-hidden', 'false');
        // Focus for accessibility
        closeBtn.focus();
      }

      // Close
      function closePopup() {
        popup.setAttribute('aria-hidden', 'true');
        variantsRoot.innerHTML = '';
        ajaxMessage.textContent = '';
      }

      // Find hotspot buttons and attach click
      root.querySelectorAll('.hotspot-btn').forEach(btn => {
        btn.addEventListener('click', function (ev) {
          const prodJson = btn.getAttribute('data-product');
          openPopupWithProduct(prodJson);
        });
      });

      // Close actions
      closeBtn.addEventListener('click', closePopup);
      document.addEventListener('keydown', function (e) { if (e.key === 'Escape') closePopup(); });
      document.addEventListener('click', function (ev) {
        if (!popup.contains(ev.target) && !ev.target.closest('.hotspot-btn')) {
          if (popup.getAttribute('aria-hidden') === 'false') closePopup();
        }
      });

      // Helper: find variant ID by selected option values
      function findVariantId(product, selectedValues) {
        for (let i=0;i<product.variants.length;i++){
          const v = product.variants[i];
          // v.options is an array
          const matches = v.options.every((optVal, idx) => {
            const sel = selectedValues[idx] !== undefined ? selectedValues[idx] : optVal;
            return String(sel).toLowerCase() === String(optVal).toLowerCase();
          });
          if (matches) return v.id;
        }
        return null;
      }

      // Submit Add to Cart (AJAX)
      popupForm.addEventListener('submit', function (ev) {
        ev.preventDefault();
        const product = normalizeProduct(popupForm.dataset.product);
        if (!product) return;

        // read selected variant option values
        const selects = variantsRoot.querySelectorAll('select');
        const selectedValues = [];
        selects.forEach((s, i) => selectedValues[i] = s.value);

        const variantId = findVariantId(product, selectedValues) || product.variants[0].id;
        const quantity = parseInt(qtyInput.value, 10) || 1;

        // Add primary product
        const payload = { id: variantId, quantity: quantity };
        ajaxMessage.textContent = 'Adding to cart...';

        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
          body: JSON.stringify(payload)
        })
        .then(res => {
          if (!res.ok) throw res;
          return res.json();
        })
        .then(data => {
          ajaxMessage.textContent = 'Added to cart';
          // After adding primary product, check the special rule:
          // if any selected option values include 'Black' and include 'Medium' (case-insensitive)
          const lowerVals = selectedValues.map(v=>String(v).toLowerCase());
          if (lowerVals.includes('black') && lowerVals.includes('medium') && jacketProduct) {
            // Add the jacket (choose first available variant)
            const jacketVariantId = (jacketProduct.variants && jacketProduct.variants[0]) ? jacketProduct.variants[0].id : null;
            if (jacketVariantId) {
              const jacketPayload = { id: jacketVariantId, quantity: 1 };
              return fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                body: JSON.stringify(jacketPayload)
              })
              .then(r => {
                if (!r.ok) throw r;
                return r.json();
              })
              .then(() => {
                ajaxMessage.textContent = 'Added product and Soft Winter Jacket to cart';
                // Optionally: open cart drawer or redirect to cart page:
                // window.location.href = '/cart';
              });
            }
          } else {
            // done
            // Optionally update cart count visually (if theme has a cart drawer)
          }
        })
        .catch(async (err) => {
          let msg = 'Failed to add to cart';
          try {
            const json = await err.json();
            if (json && json.description) msg = json.description;
          } catch(e){}
          ajaxMessage.textContent = msg;
        });

      });

      // Format money helper (Shopify provides Shopify.formatMoney sometimes in storefront)
      if (!window.Shopify) window.Shopify = window.Shopify || {};
      if (!Shopify.formatMoney) {
        Shopify.formatMoney = function (cents, format) {
          // basic fallback formatting - assume cents is integer
          const n = (cents / 100).toFixed(2);
          return format.replace(/\{\{ *amount *\}\}/, n);
        };
      }

    })();
  </script>

  {% schema %}
  {
    "name": "Product Grid (Figma)",
    "settings": [
      {
        "id": "heading",
        "type": "text",
        "label": "Section heading",
        "default": "Tisso vison in the wild"
      },
      {
        "id": "jacket_product_handle",
        "type": "product",
        "label": "Soft Winter Jacket product (auto-add when Black+Medium)",
        "default": ""
      }
    ],
    "blocks": [
      {
        "type": "product",
        "name": "Product slot",
        "settings": [
          {
            "id": "product_handle",
            "type": "product",
            "label": "Choose product"
          }
        ]
      }
    ],
    "max_blocks": 6,
    "presets": [
      {
        "name": "Product grid (Figma)",
        "category": "Custom"
      }
    ]
  }
  {% endschema %}
</section>